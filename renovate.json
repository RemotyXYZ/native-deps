{
  "$schema": "https://docs.renovatebot.com/renovate-schema.json",
  "extends": [
    "config:recommended",
    ":label(type/renovate)",
    ":docker",
    "docker:enableMajor",
    "docker:pinDigests",
    ":disableRateLimiting",
    ":ignoreUnstable",
    ":pinVersions",
    ":separateMajorReleases",
    ":automergePr",
    ":automergeRequireAllStatusChecks",
    ":automergeAll",
    ":semanticCommits",
    ":enableVulnerabilityAlerts",
    ":enableVulnerabilityAlertsWithLabel(security)"
  ],
  "rebaseWhen": "conflicted",
  "platformAutomerge": true,
  "rebaseLabel": "renovate/rebase",
  "stopUpdatingLabel": "renovate/stop-updating",
  "major": {
    "labels": [
      "bump/major"
    ]
  },
  "minor": {
    "labels": [
      "bump/minor"
    ]
  },
  "patch": {
    "labels": [
      "bump/patch"
    ]
  },
  "pin": {
    "labels": [
      "bump/pin"
    ]
  },
  "digest": {
    "labels": [
      "bump/digest"
    ]
  },
  "customManagers": [
    {
      "customType": "regex",
      "fileMatch": [
        "^stages/.*\\.sh$"
      ],
      "matchStrings": [
        "#\\s*renovate:\\s*datasource=(?<datasource>.*?) depName=(?<depName>.*?)( versioning=(?<versioning>.*?))?( registryUrl=(?<registryUrl>.*?))?\\n_tag='(?<currentValue>.*)'\\s"
      ],
      "versioningTemplate": "{{#if versioning}}{{{versioning}}}{{else}}semver{{/if}}"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^stages/.*\\.sh$"
      ],
      "matchStrings": [
        "#\\s*renovate:\\s*depName=(?<depName>.*?)\\n_commit='(?<currentValue>)(?<currentDigest>.*?)'"
      ],
      "versioningTemplate": "git",
      "datasourceTemplate": "git-refs"
    },
    {
      "customType": "regex",
      "fileMatch": [
        "^Dockerfile$"
      ],
      "matchStrings": [
        "#\\s*renovate:\\s*datasource=(?<datasource>.*?) depName=(?<depName>.*?)( versioning=(?<versioning>.*?))?( registryUrl=(?<registryUrl>.*?))?\\n(ENV|ARG) .*?_VERSION='(?<currentValue>.*)'\\s"
      ],
      "versioningTemplate": "{{#if versioning}}{{{versioning}}}{{else}}semver{{/if}}"
    }
  ],
  "packageRules": [
    {
      "matchPackageNames": [
        "Kitware/CMake",
        "DLTcollab/sse2neon",
        "tukaani-project/xz",
        "xiph/ogg",
        "strukturag/libde265",
        "xiph/vorbis",
        "Fintel/libvpl",
        "xiph/opus",
        "AOMediaCodec/SVT-AV1",
        "strukturag/libheif",
        "protocolbuffers/protobuf",
        "microsoft/onnxruntime"
      ],
      "extractVersion": "^v(?<version>.+)$"
    },
    {
      "matchPackageNames": [
        "mm2/Little-CMS"
      ],
      "extractVersion": "^lcms(?<version>.+)$"
    },
    {
      "matchPackageNames": [
        "FFmpeg/nv-codec-headers"
      ],
      "extractVersion": "^n(?<version>.+)$"
    },
    {
      "matchPackageNames": [
        "sekrit-twc/zimg"
      ],
      "extractVersion": "^release-(?<version>.+)$"
    },
    {
      "matchPackageNames": [
        "bblanchon/pdfium-binaries"
      ],
      "extractVersion": "^chromium/(?<version>.+)$"
    },
    {
      "matchPackageNames": [
        "intel/libva"
      ],
      "extractVersion": "^(?<version>\\d+\\.\\d+\\.\\d+)$"
    },
    {
      "matchPackageNames": [
        "intel/libvpl"
      ],
      "extractVersion": "^v(?<version>\\d+\\.\\d+\\.\\d+)$",
      "allowedVersions": "!/^v20[0-9]{6}$/"
    },
    {
      "matchPackageNames": [
        "mesa/drm"
      ],
      "extractVersion": "^libdrm-(?<version>.+)$"
    },
    {
      "matchPackageNames": [
        "xorg/lib/libpciaccess"
      ],
      "extractVersion": "^libpciaccess-(?<version>.+)$"
    }
  ]
}
